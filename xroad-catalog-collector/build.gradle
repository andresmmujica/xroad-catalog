buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.2.RELEASE")
    }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: 'spring-boot'




description = """"""

sourceCompatibility = 1.8
targetCompatibility = 1.8



repositories {
    mavenCentral()
    mavenLocal()
}

configurations {
    wsimport
    jaxb
}

jar {
    baseName = 'xroad-catalog-collector'
}

task genJaxb {
    ext.sourcesDir = "${buildDir}/generated-sources/jaxb"
    ext.classesDir = "${buildDir}/classes/jaxb"
    ext.schemaDir = "${projectDir}/src/main/resources/schema/"

    outputs.dir classesDir

    doLast() {
        project.ant {
            taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask",
                    classpath: configurations.jaxb.asPath
            mkdir(dir: sourcesDir)
            mkdir(dir: classesDir)

            xjc(destdir: sourcesDir) {
                schema(dir: schemaDir, includes: "**/*xsd")
                arg(value: "-wsdl")
                produces(dir: sourcesDir, includes: "**/*.java")
            }

            javac(destdir: classesDir, source: 1.8, target: 1.8, debug: true,
                    debugLevel: "lines,vars,source",
                    classpath: configurations.jaxb.asPath,
                    includeantruntime: "false") {
                src(path: sourcesDir)
                include(name: "**/*.java")
                include(name: "*.java")
            }

            copy(todir: classesDir) {
                fileset(dir: sourcesDir, erroronmissingdir: false) {
                    exclude(name: "**/*.java")
                }
            }
        }
    }
}


task wsImport {
    ext.outputDir = "${buildDir}/generated-sources/wsimport"
    ext.classesDir = "${buildDir}/classes/wsimport"
    ext.wsdl = "${projectDir}/src/main/resources/schema/list-methods.wsdl"

    inputs.files wsdl
    outputs.dir classesDir

    doLast() {
        project.ant {
            taskdef name: "wsimport", classname: "com.sun.tools.ws.ant.WsImport",
                    classpath: configurations.wsimport.asPath
            mkdir(dir: outputDir)
            mkdir(dir: classesDir)


            wsimport(destdir: outputDir, wsdl: wsdl,
                    package: "fi.vrk.xroad.catalog.collector.wsimport") {
                produces(dir: outputDir, includes: "**/*.class")
            }

            javac(destdir: classesDir, source: 1.8, target: 1.8, debug: true,
                    debugLevel: "lines,vars,source",
                    classpath: configurations.wsimport.asPath,
                    includeantruntime: "false") {
                src(path: outputDir)
                include(name: "**/*.java")
                include(name: "*.java")
            }

            copy(todir: classesDir) {
                fileset(dir: outputDir, erroronmissingdir: false) {
                    exclude(name: "**/*.java")
                }
            }
        }
    }
}

dependencies {
    compile group: 'org.springframework.boot', name: 'spring-boot-autoconfigure', version:'1.3.2.RELEASE'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter', version:'1.3.2.RELEASE'
    compile("org.springframework:spring-web")
    compile("org.springframework.boot:spring-boot-starter-ws")
    compile group: 'org.springframework', name: 'spring-jdbc', version:'4.2.4.RELEASE'
    compile group: 'com.typesafe.akka', name: 'akka-actor_2.11', version:'2.4.2'
    compile group: 'com.typesafe.akka', name: 'akka-slf4j_2.11', version:'2.4.2'
    compile group: 'c3p0', name: 'c3p0', version:'0.9.1.2'
    compile group: 'com.h2database', name: 'h2', version:'1.4.177'
    compile group: 'ch.qos.logback', name: 'logback-classic', version:'1.1.2'
    compile 'fi.vrk.xroad:xroad-catalog-persistence:1.0-SNAPSHOT'
    compile 'org.projectlombok:lombok:1.16.6'
    compile 'org.apache.cxf:cxf-rt-frontend-jaxws:3.1.4'
    compile 'org.apache.cxf:cxf-rt-transports-http:3.1.4'
    compile 'org.apache.cxf:cxf-core:3.1.4'
    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile 'org.mockito:mockito-all:2.0.2-beta'
    testCompile 'com.typesafe.akka:akka-testkit_2.11:2.4.2'
    testCompile 'org.powermock:powermock-core:1.6.4'
    testCompile 'org.powermock:powermock-module-junit4:1.6.4'
    testCompile 'org.powermock:powermock-api-mockito:1.6.4'
    jaxb("com.sun.xml.bind:jaxb-xjc:2.2.4-1")
    wsimport "com.sun.xml.ws:jaxws-tools:2.1.7"
    compile(files(genJaxb.classesDir).builtBy(genJaxb))
    compile(files(wsImport.classesDir).builtBy(wsImport))


}

idea {
    project {
        //if you want to set specific jdk and language level
        jdkName = '1.8'
        languageLevel = '1.8'
    }
    module {
        downloadSources = true
    }
}

